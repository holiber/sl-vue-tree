{"version":3,"sources":["webpack://SlVueTree/webpack/universalModuleDefinition","webpack://SlVueTree/webpack/bootstrap","webpack://SlVueTree/./src/sl-vue-tree.js","webpack://SlVueTree/./src/sl-vue-tree.vue?2ddf","webpack://SlVueTree/./src/sl-vue-tree.vue","webpack://SlVueTree/./node_modules/vue-loader/lib/runtime/component-normalizer.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","sl_vue_tree","props","type","Array","default","edgeSize","Number","showBranches","Boolean","level","parentInd","allowMultiselect","multiselectKey","String","validator","allowedKeys","multiselectKeys","isArray","filter","keyName","indexOf","length","scrollAreaHeight","maxScrollSpeed","[object Object]","rootCursorPosition","scrollIntervalId","scrollSpeed","lastSelectedNode","mouseIsDown","isDragging","lastMousePos","x","y","preventDrag","currentValue","this","isRoot","document","addEventListener","onDocumentMouseupHandler","removeEventListener","watch","newValue","computed","getParent","cursorPosition","nodeModels","copy","getNodes","nodes","children","gaps","push","getSelected","getDraggable","methods","pos","setCursorPosition","parentPath","isVisible","map","nodeModel","ind","nodePath","concat","getNode","path","siblings","slice","getNodeSiblings","isExpanded","isDraggable","isSelectable","title","isLeaf","isSelected","data","pathStr","JSON","stringify","isFirstChild","isLastChild","getRoot","$emit","selectedNodes","event","draggingNodes","position","toggledNode","node","preventDefault","getCursorPositionFromCoords","clientX","clientY","addToSelection","multiSelectKey","multiselectKeyIsPressed","find","key","selectedNode","newNodes","shiftSelectionMode","shiftKey","shiftSelectionStarted","traverse","emitInput","emitSelect","onMousemoveHandler","initialDraggingState","isDragStarted","$root","$el","rootRect","getBoundingClientRect","$dragInfo","$refs","dragInfo","dragInfoTop","top","scrollTop","style","marginBottom","dragInfoLeft","left","destNode","placement","select","scrollBottomLine","bottom","scrollDownSpeed","scrollTopLine","scrollTopSpeed","startScroll","stopScroll","$target","elementFromPoint","$nodeItem","getAttribute","closest","parse","nodeHeight","offsetHeight","offsetY","height","getLastNode","getFirstNode","querySelector","lastNode","resultNode","comparePaths","prevNodes","path1","path2","button","onNodeMousedownHandler","speed","setInterval","clearInterval","onNodeMouseupHandler","targetNode","stopDrag","draggingNode","checkNodeIsParent","nodeModelsToInsert","draggingNodeModel","destSiblings","destNodeModel","unshift","insertInd","splice","traverseModels","_markToDelete","emitDrop","updateNode","emitToggle","stopPropagation","$parent","patch","assign","cb","shouldStop","nodeInd","itemPath","paths","pathsStr","sourceNode","destPath","entity","console","log","reviver","k","v","match","Function","render","_vm","_h","$createElement","_c","_self","staticClass","class","sl-vue-tree-root","on","mousemove","mouseleave","onMouseleaveHandler","dragend","$event","onDragendHandler","ref","_l","sl-vue-tree-selected","visibility","dragover","_v","sl-vue-tree-cursor-hover","sl-vue-tree-cursor-inside","sl-vue-tree-node-is-leaf","sl-vue-tree-node-is-folder","attrs","mousedown","mouseup","contextmenu","emitNodeContextmenu","dblclick","emitNodeDblclick","click","emitNodeClick","onExternalDragoverHandler","drop","onExternalDropHandler","gapInd","_t","_e","_s","fromCharCode","onToggleHandler","scopedSlots","_u","fn","directives","rawName","expression","selectionSize","_withStripped","Component","scriptExports","staticRenderFns","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","hook","options","_compiled","functional","_scopeId","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","$options","shadowRoot","_injectStyles","originalRender","h","existing","beforeCreate","normalizeComponent","__file","__webpack_exports__"],"mappings":"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","file":"sl-vue-tree.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SlVueTree\"] = factory();\n\telse\n\t\troot[\"SlVueTree\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default {\n    name: 'sl-vue-tree',\n    props: {\n        value: {\n            type: Array,\n            default: () => []\n        },\n        edgeSize: {\n            type: Number,\n            default: 3\n        },\n        showBranches: {\n            type: Boolean,\n            default: false\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        parentInd: {\n            type: Number\n        },\n        allowMultiselect: {\n            type: Boolean,\n            default: true\n        },\n        multiselectKey: {\n            type: [String, Array],\n            default: ['ctrlKey', 'metaKey'],\n            validator: function(value) {\n                let allowedKeys = ['ctrlKey', 'metaKey', 'altKey'];\n                let multiselectKeys = Array.isArray(value) ? value : [value];\n                multiselectKeys = multiselectKeys.filter(keyName => allowedKeys.indexOf(keyName) !== -1);\n                return !!multiselectKeys.length;\n            }\n        },\n        scrollAreaHeight: {\n            type: Number,\n            default: 70\n        },\n        maxScrollSpeed: {\n            type: Number,\n            default: 20\n        }\n    },\n\n    data() {\n        return {\n            rootCursorPosition: null,\n            scrollIntervalId: 0,\n            scrollSpeed: 0,\n            lastSelectedNode: null,\n            mouseIsDown: false,\n            isDragging: false,\n            lastMousePos: { x: 0, y: 0 },\n            preventDrag: false,\n            currentValue: this.value\n        };\n    },\n\n    mounted() {\n        if (this.isRoot) {\n            document.addEventListener('mouseup', this.onDocumentMouseupHandler);\n        }\n    },\n\n    beforeDestroy() {\n        document.removeEventListener('mouseup', this.onDocumentMouseupHandler);\n    },\n\n    watch: {\n        value: function(newValue) {\n            this.currentValue = newValue;\n        }\n    },\n\n    computed: {\n        cursorPosition() {\n            if (this.isRoot) return this.rootCursorPosition;\n            return this.getParent().cursorPosition;\n        },\n\n        nodes() {\n            if (this.isRoot) {\n                const nodeModels = this.copy(this.currentValue);\n                return this.getNodes(nodeModels);\n            }\n\n            return this.getParent().nodes[this.parentInd].children;\n        },\n        /**\n         * gaps is using for nodes indentation\n         * @returns {number[]}\n         */\n        gaps() {\n            const gaps = [];\n            let i = this.level - 1;\n            if (!this.showBranches) i++;\n            while (i-- > 0) gaps.push(i);\n            return gaps;\n        },\n\n        isRoot() {\n            return !this.level\n        },\n\n        selectionSize() {\n            return this.getSelected().length;\n        },\n\n        dragSize() {\n            return this.getDraggable().length;\n        }\n    },\n    methods: {\n\n        setCursorPosition(pos) {\n            if (this.isRoot) {\n                this.rootCursorPosition = pos;\n                return;\n            }\n            this.getParent().setCursorPosition(pos);\n        },\n\n        getNodes(nodeModels, parentPath = [], isVisible = true) {\n\n            return nodeModels.map((nodeModel, ind) => {\n                const nodePath = parentPath.concat(ind);\n                return this.getNode(nodePath, nodeModel, nodeModels, isVisible);\n            })\n        },\n\n        getNode(\n            path,\n            nodeModel = null,\n            siblings = null,\n            isVisible = null\n        ) {\n            const ind = path.slice(-1)[0];\n\n            // calculate nodeModel, siblings, isVisible fields if it is not passed as arguments\n            siblings = siblings || this.getNodeSiblings(this.currentValue, path);\n            nodeModel = nodeModel || (siblings && siblings[ind]) || null;\n\n            if (isVisible == null) {\n                isVisible = this.isVisible(path);\n            }\n\n            if (!nodeModel) return null;\n\n            const isExpanded = nodeModel.isExpanded == void 0 ? true : !!nodeModel.isExpanded;\n            const isDraggable = nodeModel.isDraggable == void 0 ? true : !!nodeModel.isDraggable;\n            const isSelectable = nodeModel.isSelectable == void 0 ? true : !!nodeModel.isSelectable;\n\n            const node = {\n\n                // define the all ISlTreeNodeModel props\n                title: nodeModel.title,\n                isLeaf: !!nodeModel.isLeaf,\n                children: nodeModel.children ? this.getNodes(nodeModel.children, path, isExpanded) : [],\n                isSelected: !!nodeModel.isSelected,\n                isExpanded,\n                isVisible,\n                isDraggable,\n                isSelectable,\n                data: nodeModel.data !== void 0 ? nodeModel.data : {},\n\n                // define the all ISlTreeNode computed props\n                path: path,\n                pathStr: JSON.stringify(path),\n                level: path.length,\n                ind,\n                isFirstChild: ind == 0,\n                isLastChild: ind === siblings.length - 1\n            };\n            return node;\n        },\n\n        isVisible(path) {\n            if (path.length < 2) return true;\n            let nodeModels = this.currentValue;\n\n            for (let i = 0; i < path.length - 1; i++) {\n                let ind = path[i];\n                let nodeModel = nodeModels[ind];\n                let isExpanded = nodeModel.isExpanded == void 0 ? true : !!nodeModel.isExpanded;\n                if (!isExpanded) return false;\n                nodeModels = nodeModel.children;\n            }\n\n            return true;\n        },\n\n        emitInput(newValue) {\n            this.currentValue = newValue;\n            this.getRoot().$emit('input', newValue);\n        },\n\n        emitSelect(selectedNodes, event) {\n            this.getRoot().$emit('select', selectedNodes, event);\n        },\n\n        emitDrop(draggingNodes, position, event) {\n            this.getRoot().$emit('drop', draggingNodes, position, event);\n        },\n\n        emitToggle(toggledNode, event) {\n            this.getRoot().$emit('toggle', toggledNode, event);\n        },\n\n        emitNodeClick(node, event) {\n            this.getRoot().$emit('nodeclick', node, event);\n        },\n\n        emitNodeDblclick(node, event) {\n            this.getRoot().$emit('nodedblclick', node, event);\n        },\n\n        emitNodeContextmenu(node, event) {\n            this.getRoot().$emit('nodecontextmenu', node, event);\n        },\n\n        onExternalDragoverHandler(node, event) {\n            event.preventDefault();\n            const root = this.getRoot();\n            const cursorPosition = root.getCursorPositionFromCoords(event.clientX, event.clientY);\n            root.setCursorPosition(cursorPosition);\n            root.$emit('externaldragover', cursorPosition, event);\n        },\n\n        onExternalDropHandler(node, event) {\n            const root = this.getRoot();\n            const cursorPosition = root.getCursorPositionFromCoords(event.clientX, event.clientY);\n            root.$emit('externaldrop', cursorPosition, event);\n            this.setCursorPosition(null);\n        },\n\n        select(path, addToSelection = false, event = null) {\n            const multiselectKeys = Array.isArray(this.multiSelectKey) ?\n                this.multiselectKey : [this.multiselectKey];\n            const multiselectKeyIsPressed = event && !!multiselectKeys.find(key => event[key]);\n            addToSelection = (multiselectKeyIsPressed || addToSelection) && this.allowMultiselect;\n\n            const selectedNode = this.getNode(path);\n            if (!selectedNode) return null;\n            const newNodes = this.copy(this.currentValue);\n            const shiftSelectionMode = this.allowMultiselect && event && event.shiftKey && this.lastSelectedNode;\n            const selectedNodes = [];\n            let shiftSelectionStarted = false;\n\n            this.traverse((node, nodeModel) => {\n\n\n                if (shiftSelectionMode) {\n                    if (node.pathStr === selectedNode.pathStr || node.pathStr === this.lastSelectedNode.pathStr) {\n                        nodeModel.isSelected = node.isSelectable;\n                        shiftSelectionStarted = !shiftSelectionStarted;\n                    }\n                    if (shiftSelectionStarted) nodeModel.isSelected = node.isSelectable;\n                } else if (node.pathStr === selectedNode.pathStr) {\n                    nodeModel.isSelected = node.isSelectable;\n                } else if (!addToSelection) {\n                    if (nodeModel.isSelected) nodeModel.isSelected = false;\n                }\n\n                if (nodeModel.isSelected) selectedNodes.push(node);\n\n            }, newNodes);\n\n\n            this.lastSelectedNode = selectedNode;\n            this.emitInput(newNodes);\n            this.emitSelect(selectedNodes, event);\n            return selectedNode;\n        },\n\n        onMousemoveHandler(event) {\n            if (!this.isRoot) {\n                this.getRoot().onMousemoveHandler(event);\n                return;\n            }\n\n            if (this.preventDrag) return;\n\n            const initialDraggingState = this.isDragging;\n            const isDragging =\n                this.isDragging || (\n                    this.mouseIsDown &&\n                    (this.lastMousePos.x !== event.clientX || this.lastMousePos.y !== event.clientY)\n                );\n\n            const isDragStarted = initialDraggingState === false && isDragging === true;\n\n            this.lastMousePos = {\n                x: event.clientX,\n                y: event.clientY\n            };\n\n            if (!isDragging) return;\n\n            const $root = this.getRoot().$el;\n            const rootRect = $root.getBoundingClientRect();\n            const $dragInfo = this.$refs.dragInfo;\n            const dragInfoTop = (event.clientY - rootRect.top + $root.scrollTop - ($dragInfo.style.marginBottom | 0));\n            const dragInfoLeft = (event.clientX - rootRect.left);\n\n            $dragInfo.style.top = dragInfoTop + 'px';\n            $dragInfo.style.left = dragInfoLeft + 'px';\n\n            const cursorPosition = this.getCursorPositionFromCoords(event.clientX, event.clientY);\n            const destNode = cursorPosition.node;\n            const placement = cursorPosition.placement;\n\n            if (isDragStarted && !destNode.isSelected) {\n                this.select(destNode.path, false, event);\n            }\n\n            const draggableNodes = this.getDraggable();\n            if (!draggableNodes.length) {\n                this.preventDrag = true;\n                return;\n            }\n\n            this.isDragging = isDragging;\n\n            this.setCursorPosition({ node: destNode, placement });\n\n            const scrollBottomLine = rootRect.bottom - this.scrollAreaHeight;\n            const scrollDownSpeed = (event.clientY - scrollBottomLine) / (rootRect.bottom - scrollBottomLine);\n            const scrollTopLine = rootRect.top + this.scrollAreaHeight;\n            const scrollTopSpeed = (scrollTopLine - event.clientY) / (scrollTopLine - rootRect.top);\n\n            if (scrollDownSpeed > 0) {\n                this.startScroll(scrollDownSpeed);\n            } else if (scrollTopSpeed > 0) {\n                this.startScroll(-scrollTopSpeed)\n            } else {\n                this.stopScroll();\n            }\n        },\n\n        getCursorPositionFromCoords(x, y) {\n            const $target = document.elementFromPoint(x, y);\n            const $nodeItem = $target.getAttribute('path') ? $target : $target.closest('[path]');\n            let destNode;\n            let placement;\n\n            if ($nodeItem) {\n\n                if (!$nodeItem) return;\n\n                destNode = this.getNode(JSON.parse($nodeItem.getAttribute('path')));\n\n                const nodeHeight = $nodeItem.offsetHeight;\n                const edgeSize = this.edgeSize;\n                const offsetY = y - $nodeItem.getBoundingClientRect().top;\n\n\n                if (destNode.isLeaf) {\n                    placement = offsetY >= nodeHeight / 2 ? 'after' : 'before';\n                } else {\n                    if (offsetY <= edgeSize) {\n                        placement = 'before';\n                    } else if (offsetY >= nodeHeight - edgeSize) {\n                        placement = 'after';\n                    } else {\n                        placement = 'inside';\n                    }\n                }\n            } else {\n                const $root = this.getRoot().$el;\n                const rootRect = $root.getBoundingClientRect();\n                if (y > rootRect.top + (rootRect.height / 2)) {\n                    placement = 'after';\n                    destNode = this.getLastNode();\n                } else {\n                    placement = 'before';\n                    destNode = this.getFirstNode();\n                }\n            }\n\n            return { node: destNode, placement };\n        },\n\n        onMouseleaveHandler(event) {\n            if (!this.isRoot || !this.isDragging) return;\n            const $root = this.getRoot().$el;\n            const rootRect = $root.getBoundingClientRect();\n            if (event.clientY >= rootRect.bottom) {\n                this.setCursorPosition({ node: this.nodes.slice(-1)[0], placement: 'after' });\n            } else if (event.clientY < rootRect.top) {\n                this.setCursorPosition({ node: this.getFirstNode(), placement: 'before' });\n            }\n        },\n\n        getNodeEl(path) {\n            this.getRoot().$el.querySelector(`[path=\"${JSON.stringify(path)}\"]`);\n        },\n\n        getLastNode() {\n            let lastNode = null;\n            this.traverse((node) => {\n                lastNode = node;\n            });\n            return lastNode;\n        },\n\n        getFirstNode() {\n            return this.getNode([0]);\n        },\n\n        getNextNode(path, filter = null) {\n\n            let resultNode = null;\n\n            this.traverse((node) => {\n                if (this.comparePaths(node.path, path) < 1) return;\n\n                if (!filter || filter(node)) {\n                    resultNode = node;\n                    return false; // stop traverse\n                }\n\n            });\n\n            return resultNode;\n        },\n\n        getPrevNode(path, filter) {\n            let prevNodes = [];\n\n            this.traverse((node) => {\n                if (this.comparePaths(node.path, path) >= 0) {\n                    return false;\n                }\n                prevNodes.push(node);\n            });\n\n            let i = prevNodes.length;\n            while (i--) {\n                const node = prevNodes[i];\n                if (!filter || filter(node)) return node;\n            }\n\n            return null;\n        },\n\n        /**\n         * returns 1 if path1 > path2\n         * returns -1 if path1 < path2\n         * returns 0 if path1 == path2\n         *\n         * examples\n         *\n         * [1, 2, 3] < [1, 2, 4]\n         * [1, 1, 3] < [1, 2, 3]\n         * [1, 2, 3] > [1, 2, 0]\n         * [1, 2, 3] > [1, 1, 3]\n         * [1, 2] < [1, 2, 0]\n         *\n         */\n        comparePaths(path1, path2) {\n            for (let i = 0; i < path1.length; i++) {\n                if (path2[i] == void 0) return 1;\n                if (path1[i] > path2[i]) return 1;\n                if (path1[i] < path2[i]) return -1;\n            }\n            return path2[path1.length] == void 0 ? 0 : -1;\n        },\n\n        onNodeMousedownHandler(event, node) {\n            // handle only left mouse button\n            if (event.button !== 0) return;\n\n            if (!this.isRoot) {\n                this.getRoot().onNodeMousedownHandler(event, node);\n                return;\n            }\n            this.mouseIsDown = true;\n        },\n\n\n        startScroll(speed) {\n            const $root = this.getRoot().$el;\n            if (this.scrollSpeed === speed) {\n                return;\n            } else if (this.scrollIntervalId) {\n                this.stopScroll();\n            }\n\n            this.scrollSpeed = speed;\n            this.scrollIntervalId = setInterval(() => {\n                $root.scrollTop += this.maxScrollSpeed * speed;\n            }, 20);\n        },\n\n        stopScroll() {\n            clearInterval(this.scrollIntervalId);\n            this.scrollIntervalId = 0;\n            this.scrollSpeed = 0;\n        },\n\n        onDocumentMouseupHandler(event) {\n            if (this.isDragging) this.onNodeMouseupHandler(event);\n        },\n\n        onNodeMouseupHandler(event, targetNode = null) {\n\n            // handle only left mouse button\n            if (event.button !== 0) return;\n\n            if (!this.isRoot) {\n                this.getRoot().onNodeMouseupHandler(event, targetNode);\n                return;\n            }\n\n            this.mouseIsDown = false;\n\n            if (!this.isDragging && targetNode && !this.preventDrag) {\n                this.select(targetNode.path, false, event);\n            }\n\n            this.preventDrag = false;\n\n            if (!this.cursorPosition) {\n                this.stopDrag();\n                return;\n            };\n\n\n            const draggingNodes = this.getDraggable();\n\n            // check that nodes is possible to insert\n            for (let draggingNode of draggingNodes) {\n                if (draggingNode.pathStr == this.cursorPosition.node.pathStr) {\n                    this.stopDrag();\n                    return;\n                }\n\n                if (this.checkNodeIsParent(draggingNode, this.cursorPosition.node)) {\n                    this.stopDrag();\n                    return;\n                };\n            }\n\n            const newNodes = this.copy(this.currentValue);\n            const nodeModelsToInsert = [];\n\n            // find and mark dragging model to delete\n            for (let draggingNode of draggingNodes) {\n                const sourceSiblings = this.getNodeSiblings(newNodes, draggingNode.path);\n                const draggingNodeModel = sourceSiblings[draggingNode.ind];\n                nodeModelsToInsert.push(this.copy(draggingNodeModel));\n                draggingNodeModel['_markToDelete'] = true;\n            }\n\n\n            // insert dragging nodes to the new place\n            const destNode = this.cursorPosition.node;\n            const destSiblings = this.getNodeSiblings(newNodes, destNode.path);\n            const destNodeModel = destSiblings[destNode.ind];\n\n            if (this.cursorPosition.placement === 'inside') {\n                destNodeModel.children = destNodeModel.children || [];\n                destNodeModel.children.unshift(...nodeModelsToInsert);\n            } else {\n                const insertInd = this.cursorPosition.placement === 'before' ?\n                    destNode.ind :\n                    destNode.ind + 1;\n\n                destSiblings.splice(insertInd, 0, ...nodeModelsToInsert);\n            }\n\n\n\n            // delete dragging node from the old place\n            this.traverseModels((nodeModel, siblings, ind) => {\n                if (!nodeModel._markToDelete) return;\n                siblings.splice(ind, 1);\n            }, newNodes);\n\n\n            this.lastSelectedNode = null;\n            this.emitInput(newNodes);\n            this.emitDrop(draggingNodes, this.cursorPosition, event);\n            this.stopDrag();\n        },\n\n\n        onToggleHandler(event, node) {\n            this.updateNode(node.path, { isExpanded: !node.isExpanded });\n            this.emitToggle(node, event);\n            event.stopPropagation();\n        },\n\n        stopDrag() {\n            this.isDragging = false;\n            this.mouseIsDown = false;\n            this.setCursorPosition(null);\n            this.stopScroll();\n        },\n\n\n        getParent() {\n            return this.$parent;\n        },\n\n        getRoot() {\n            if (this.isRoot) return this;\n            return this.getParent().getRoot();\n        },\n\n        getNodeSiblings(nodes, path) {\n            if (path.length === 1) return nodes;\n            return this.getNodeSiblings(nodes[path[0]].children, path.slice(1));\n        },\n\n\n        updateNode(path, patch) {\n            if (!this.isRoot) {\n                this.getParent().updateNode(path, patch);\n                return;\n            }\n\n            const pathStr = JSON.stringify(path);\n            const newNodes = this.copy(this.currentValue);\n            this.traverse((node, nodeModel) => {\n                if (node.pathStr !== pathStr) return;\n                Object.assign(nodeModel, patch);\n            }, newNodes);\n\n            this.emitInput(newNodes);\n        },\n\n        getSelected() {\n            const selectedNodes = [];\n            this.traverse((node) => {\n                if (node.isSelected) selectedNodes.push(node);\n            });\n            return selectedNodes;\n        },\n\n        getDraggable() {\n            const selectedNodes = [];\n            this.traverse((node) => {\n                if (node.isSelected && node.isDraggable) selectedNodes.push(node);\n            });\n            return selectedNodes;\n        },\n\n\n        traverse(\n            cb,\n            nodeModels = null,\n            parentPath = []\n        ) {\n            if (!nodeModels) nodeModels = this.currentValue;\n\n            let shouldStop = false;\n\n            const nodes = [];\n\n            for (let nodeInd = 0; nodeInd < nodeModels.length; nodeInd++) {\n                const nodeModel = nodeModels[nodeInd];\n                const itemPath = parentPath.concat(nodeInd);\n                const node = this.getNode(itemPath, nodeModel, nodeModels);\n                shouldStop = cb(node, nodeModel, nodeModels) === false;\n                nodes.push(node);\n\n                if (shouldStop) break;\n\n                if (nodeModel.children) {\n                    shouldStop = this.traverse(cb, nodeModel.children, itemPath) === false;\n                    if (shouldStop) break;\n                }\n            }\n\n            return !shouldStop ? nodes : false;\n        },\n\n        traverseModels(cb, nodeModels) {\n            let i = nodeModels.length;\n            while (i--) {\n                const nodeModel = nodeModels[i];\n                if (nodeModel.children) this.traverseModels(cb, nodeModel.children);\n                cb(nodeModel, nodeModels, i);\n            }\n            return nodeModels;\n        },\n\n        remove(paths) {\n            const pathsStr = paths.map(path => JSON.stringify(path));\n            const newNodes = this.copy(this.currentValue);\n            this.traverse((node, nodeModel, siblings) => {\n                for (const pathStr of pathsStr) {\n                    if (node.pathStr === pathStr) nodeModel._markToDelete = true;\n                }\n            }, newNodes);\n\n            this.traverseModels((nodeModel, siblings, ind) => {\n                if (!nodeModel._markToDelete) return;\n                siblings.splice(ind, 1);\n            }, newNodes);\n\n            this.emitInput(newNodes);\n        },\n\n        checkNodeIsParent(sourceNode, destNode) {\n            const destPath = destNode.path;\n            return JSON.stringify(destPath.slice(0, sourceNode.path.length)) == sourceNode.pathStr;\n        },\n\n        copy(entity) {\n            console.log(JSON.parse(JSON.stringify(entity), this.reviver))\n            return JSON.parse(JSON.stringify(entity), this.reviver);\n        },\n\n        reviver(k, v) {\n            if (typeof v === 'string' && v.match(/^function/)) {\n                return Function.call(this, 'return ' + v)();\n            }\n\n            return v;\n        }\n\n    }\n};","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"sl-vue-tree\",\n      class: { \"sl-vue-tree-root\": _vm.isRoot },\n      on: {\n        mousemove: _vm.onMousemoveHandler,\n        mouseleave: _vm.onMouseleaveHandler,\n        dragend: function($event) {\n          _vm.onDragendHandler(null, $event)\n        }\n      }\n    },\n    [\n      _c(\n        \"div\",\n        { ref: \"nodes\", staticClass: \"sl-vue-tree-nodes-list\" },\n        [\n          _vm._l(_vm.nodes, function(node, nodeInd) {\n            return _c(\n              \"div\",\n              {\n                staticClass: \"sl-vue-tree-node\",\n                class: { \"sl-vue-tree-selected\": node.isSelected }\n              },\n              [\n                _c(\"div\", {\n                  staticClass: \"sl-vue-tree-cursor sl-vue-tree-cursor_before\",\n                  style: {\n                    visibility:\n                      _vm.cursorPosition &&\n                      _vm.cursorPosition.node.pathStr === node.pathStr &&\n                      _vm.cursorPosition.placement === \"before\"\n                        ? \"visible\"\n                        : \"hidden\"\n                  },\n                  on: {\n                    dragover: function($event) {\n                      $event.preventDefault()\n                    }\n                  }\n                }),\n                _vm._v(\" \"),\n                _c(\n                  \"div\",\n                  {\n                    staticClass: \"sl-vue-tree-node-item\",\n                    class: {\n                      \"sl-vue-tree-cursor-hover\":\n                        _vm.cursorPosition &&\n                        _vm.cursorPosition.node.pathStr === node.pathStr,\n\n                      \"sl-vue-tree-cursor-inside\":\n                        _vm.cursorPosition &&\n                        _vm.cursorPosition.placement === \"inside\" &&\n                        _vm.cursorPosition.node.pathStr === node.pathStr,\n                      \"sl-vue-tree-node-is-leaf\": node.isLeaf,\n                      \"sl-vue-tree-node-is-folder\": !node.isLeaf\n                    },\n                    attrs: { path: node.pathStr },\n                    on: {\n                      mousedown: function($event) {\n                        _vm.onNodeMousedownHandler($event, node)\n                      },\n                      mouseup: function($event) {\n                        _vm.onNodeMouseupHandler($event, node)\n                      },\n                      contextmenu: function($event) {\n                        _vm.emitNodeContextmenu(node, $event)\n                      },\n                      dblclick: function($event) {\n                        _vm.emitNodeDblclick(node, $event)\n                      },\n                      click: function($event) {\n                        _vm.emitNodeClick(node, $event)\n                      },\n                      dragover: function($event) {\n                        _vm.onExternalDragoverHandler(node, $event)\n                      },\n                      drop: function($event) {\n                        _vm.onExternalDropHandler(node, $event)\n                      }\n                    }\n                  },\n                  [\n                    _vm._l(_vm.gaps, function(gapInd) {\n                      return _c(\"div\", { staticClass: \"sl-vue-tree-gap\" })\n                    }),\n                    _vm._v(\" \"),\n                    _vm.level && _vm.showBranches\n                      ? _c(\n                          \"div\",\n                          { staticClass: \"sl-vue-tree-branch\" },\n                          [\n                            _vm._t(\n                              \"branch\",\n                              [\n                                !node.isLastChild\n                                  ? _c(\"span\", [\n                                      _vm._v(\n                                        \"\\n            \" +\n                                          _vm._s(String.fromCharCode(0x251c)) +\n                                          _vm._s(String.fromCharCode(0x2500)) +\n                                          \" \\n          \"\n                                      )\n                                    ])\n                                  : _vm._e(),\n                                _vm._v(\" \"),\n                                node.isLastChild\n                                  ? _c(\"span\", [\n                                      _vm._v(\n                                        \"\\n            \" +\n                                          _vm._s(String.fromCharCode(0x2514)) +\n                                          _vm._s(String.fromCharCode(0x2500)) +\n                                          \" \\n          \"\n                                      )\n                                    ])\n                                  : _vm._e()\n                              ],\n                              { node: node }\n                            )\n                          ],\n                          2\n                        )\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    _c(\n                      \"div\",\n                      { staticClass: \"sl-vue-tree-title\" },\n                      [\n                        !node.isLeaf\n                          ? _c(\n                              \"span\",\n                              {\n                                staticClass: \"sl-vue-tree-toggle\",\n                                on: {\n                                  click: function($event) {\n                                    _vm.onToggleHandler($event, node)\n                                  }\n                                }\n                              },\n                              [\n                                _vm._t(\n                                  \"toggle\",\n                                  [\n                                    _c(\"span\", [\n                                      _vm._v(\n                                        \"\\n             \" +\n                                          _vm._s(\n                                            !node.isLeaf\n                                              ? node.isExpanded\n                                                ? \"-\"\n                                                : \"+\"\n                                              : \"\"\n                                          ) +\n                                          \"\\n            \"\n                                      )\n                                    ])\n                                  ],\n                                  { node: node }\n                                )\n                              ],\n                              2\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm._t(\"title\", [_vm._v(_vm._s(node.title))], {\n                          node: node\n                        })\n                      ],\n                      2\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"div\",\n                      { staticClass: \"sl-vue-tree-sidebar\" },\n                      [_vm._t(\"sidebar\", null, { node: node })],\n                      2\n                    )\n                  ],\n                  2\n                ),\n                _vm._v(\" \"),\n                node.children && node.children.length && node.isExpanded\n                  ? _c(\"sl-vue-tree\", {\n                      attrs: {\n                        value: node.children,\n                        level: node.level,\n                        parentInd: nodeInd,\n                        allowMultiselect: _vm.allowMultiselect,\n                        edgeSize: _vm.edgeSize,\n                        showBranches: _vm.showBranches\n                      },\n                      on: {\n                        dragover: function($event) {\n                          $event.preventDefault()\n                        }\n                      },\n                      scopedSlots: _vm._u([\n                        {\n                          key: \"title\",\n                          fn: function(ref) {\n                            var node = ref.node\n                            return [\n                              _vm._t(\"title\", [_vm._v(_vm._s(node.title))], {\n                                node: node\n                              })\n                            ]\n                          }\n                        },\n                        {\n                          key: \"toggle\",\n                          fn: function(ref) {\n                            var node = ref.node\n                            return [\n                              _vm._t(\n                                \"toggle\",\n                                [\n                                  _c(\"span\", [\n                                    _vm._v(\n                                      \"\\n             \" +\n                                        _vm._s(\n                                          !node.isLeaf\n                                            ? node.isExpanded\n                                              ? \"-\"\n                                              : \"+\"\n                                            : \"\"\n                                        ) +\n                                        \"\\n          \"\n                                    )\n                                  ])\n                                ],\n                                { node: node }\n                              )\n                            ]\n                          }\n                        },\n                        {\n                          key: \"sidebar\",\n                          fn: function(ref) {\n                            var node = ref.node\n                            return [_vm._t(\"sidebar\", null, { node: node })]\n                          }\n                        }\n                      ])\n                    })\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\"div\", {\n                  staticClass: \"sl-vue-tree-cursor sl-vue-tree-cursor_after\",\n                  style: {\n                    visibility:\n                      _vm.cursorPosition &&\n                      _vm.cursorPosition.node.pathStr === node.pathStr &&\n                      _vm.cursorPosition.placement === \"after\"\n                        ? \"visible\"\n                        : \"hidden\"\n                  },\n                  on: {\n                    dragover: function($event) {\n                      $event.preventDefault()\n                    }\n                  }\n                })\n              ],\n              1\n            )\n          }),\n          _vm._v(\" \"),\n          _vm.isRoot\n            ? _c(\n                \"div\",\n                {\n                  directives: [\n                    {\n                      name: \"show\",\n                      rawName: \"v-show\",\n                      value: _vm.isDragging,\n                      expression: \"isDragging\"\n                    }\n                  ],\n                  ref: \"dragInfo\",\n                  staticClass: \"sl-vue-tree-drag-info\"\n                },\n                [\n                  _vm._t(\"draginfo\", [\n                    _vm._v(\n                      \"\\n        Items: \" +\n                        _vm._s(_vm.selectionSize) +\n                        \"\\n      \"\n                    )\n                  ])\n                ],\n                2\n              )\n            : _vm._e()\n        ],\n        2\n      )\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\nexport { render, staticRenderFns }\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-539decb0\", { render: render, staticRenderFns: staticRenderFns })\n  }\n}","var disposed = false\n/* script */\nexport * from \"!!!./sl-vue-tree.js\"\nimport __vue_script__ from \"!!!./sl-vue-tree.js\"/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-539decb0\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/vue-loader/lib/selector?type=template&index=0!./sl-vue-tree.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src/sl-vue-tree.vue\"\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-539decb0\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-539decb0\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nexport default Component.exports\n","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  scriptExports = scriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof scriptExports.default\n  if (type === 'object' || type === 'function') {\n    scriptExports = scriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n"],"sourceRoot":""}